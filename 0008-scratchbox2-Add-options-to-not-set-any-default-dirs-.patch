From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bj=C3=B6rn=20Bidar?= <bjorn.bidar@jolla.com>
Date: Tue, 31 Aug 2021 01:52:27 +0300
Subject: [PATCH] (scratchbox2) Add options to not set any default dirs for
 ld.so

Adds a new option "--nodefaultdirs" to ld.so.

This option disables searching from the default directories
(/lib,/usr/lib) and also disables use of ld.so's search
cache.

This is recommended for correct operation with Scratchbox 2;
without this, libraries may be incorrectly loaded from the
host environment (such libraries that are missing from
the "scratchboxed" environment but are present in the host).
---
 elf/dl-load.c              |  8 +++++---
 elf/dl-support.c           |  3 +++
 elf/rtld.c                 | 10 ++++++++++
 sysdeps/generic/ldsodefs.h |  2 ++
 4 files changed, 20 insertions(+), 3 deletions(-)

diff --git a/elf/dl-load.c b/elf/dl-load.c
index 5abeb867f17a1fe0fcea4e6d66b62267d55695d3..c092ed3e674650f3b93dfca992bbdc775f6d1b8e 100644
--- a/elf/dl-load.c
+++ b/elf/dl-load.c
@@ -2102,7 +2102,8 @@ _dl_map_object (struct link_map *loader, const char *name,
 
 	      /* If the loader has the DF_1_NODEFLIB flag set we must not
 		 use a cache entry from any of these directories.  */
-	      if (__glibc_unlikely (l->l_flags_1 & DF_1_NODEFLIB))
+	      if (__glibc_unlikely (l->l_flags_1 & DF_1_NODEFLIB) ||
+                       GLRO(dl_no_default_dirs))
 		{
 		  const char *dirp = system_dirs;
 		  unsigned int cnt = 0;
@@ -2141,7 +2142,8 @@ _dl_map_object (struct link_map *loader, const char *name,
       /* Finally, try the default path.  */
       if (fd == -1
 	  && ((l = loader ?: GL(dl_ns)[nsid]._ns_loaded) == NULL
-	      || __glibc_likely (!(l->l_flags_1 & DF_1_NODEFLIB)))
+	      || __glibc_likely (!(l->l_flags_1 & DF_1_NODEFLIB)) ||
+		GLRO(dl_no_default_dirs))
 	  && rtld_search_dirs.dirs != (void *) -1)
 	fd = open_path (name, namelen, mode, &rtld_search_dirs,
 			&realname, &fb, l, LA_SER_DEFAULT, &found_other_class);
@@ -2322,7 +2324,7 @@ _dl_rtld_di_serinfo (struct link_map *loader, Dl_serinfo *si, bool counting)
      a way to indicate that in the results for Dl_serinfo.  */
 
   /* Finally, try the default path.  */
-  if (!(loader->l_flags_1 & DF_1_NODEFLIB))
+  if (!((loader->l_flags_1 & DF_1_NODEFLIB) || GLRO(dl_no_default_dirs)))
     add_path (&p, &rtld_search_dirs, XXX_default);
 
   if (counting)
diff --git a/elf/dl-support.c b/elf/dl-support.c
index 0a8b636d028a869037203defadefcd8de861b8a0..a9cf3366633f2aa8ea4c16b8eb2ecd2015174e57 100644
--- a/elf/dl-support.c
+++ b/elf/dl-support.c
@@ -58,6 +58,9 @@ const char *_dl_profile_output;
    ignored.  */
 const char *_dl_inhibit_rpath;
 
+/* flag: don't search default directories if set. */
+int _dl_no_default_dirs = 0;
+
 /* The map for the object we will profile.  */
 struct link_map *_dl_profile_map;
 
diff --git a/elf/rtld.c b/elf/rtld.c
index c9490ff694009f851aa1511ac538cd2d649d36c5..38b56eb380e035202b978c786f7fcac5730d5d5e 100644
--- a/elf/rtld.c
+++ b/elf/rtld.c
@@ -1160,6 +1160,15 @@ dl_main (const ElfW(Phdr) *phdr,
 	else if (! strcmp (_dl_argv[1], "--inhibit-cache"))
 	  {
 	    GLRO(dl_inhibit_cache) = 1;
+	    ++_dl_skip_args;
+	    --_dl_argc;
+	    ++_dl_argv;
+	  }
+	else if (! strcmp (_dl_argv[1], "--nodefaultdirs")
+		 && _dl_argc > 2)
+	  {
+	    GLRO(dl_no_default_dirs) = 1;
+
 	    ++_dl_skip_args;
 	    --_dl_argc;
 	    ++_dl_argv;
@@ -1220,6 +1229,7 @@ of this helper program; chances are you did not intend to run this program.\n\
   --list                list all dependencies and how they are resolved\n\
   --verify              verify that given object really is a dynamically linked\n\
 			object we can handle\n\
+  --nodefaultdirs       Do not search from default directories or cache\n\
   --inhibit-cache       Do not use " LD_SO_CACHE "\n\
   --library-path PATH   use given PATH instead of content of the environment\n\
 			variable LD_LIBRARY_PATH\n\
diff --git a/sysdeps/generic/ldsodefs.h b/sysdeps/generic/ldsodefs.h
index b1fc5c31f972bbb8eae42a7afbfc10cd81aa165f..ddf23e32ad1952aab5b1ca955d98f90f42e346ec 100644
--- a/sysdeps/generic/ldsodefs.h
+++ b/sysdeps/generic/ldsodefs.h
@@ -589,6 +589,8 @@ struct rtld_global_ro
      platforms.  */
   EXTERN uint64_t _dl_hwcap2;
 
+  EXTERN int _dl_no_default_dirs;
+
 #ifdef SHARED
   /* We add a function table to _rtld_global which is then used to
      call the function instead of going through the PLT.  The result
